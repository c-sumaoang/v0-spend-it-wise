import { isPlatformNative } from "../platform"

export interface ShareOptions {
  title?: string
  text?: string
  url?: string
  files?: string[]
  dialogTitle?: string
}

class ShareManager {
  private Share: any = null
  private isNative = false

  constructor() {
    if (typeof window !== "undefined") {
      this.isNative = isPlatformNative()
      this.initialize()
    }
  }

  private async initialize() {
    if (this.isNative) {
      try {
        const { Share } = await import("@capacitor/share")
        this.Share = Share
      } catch (error) {
        console.error("[v0] Failed to initialize share:", error)
        this.isNative = false
      }
    }
  }

  async canShare(): Promise<boolean> {
    if (this.isNative && this.Share) {
      try {
        const result = await this.Share.canShare()
        return result.value
      } catch (error) {
        return false
      }
    }

    // Web Share API
    return typeof navigator !== "undefined" && "share" in navigator
  }

  async share(options: ShareOptions): Promise<boolean> {
    if (!this.isNative || !this.Share) {
      // Fallback to Web Share API
      if (typeof navigator !== "undefined" && "share" in navigator) {
        try {
          await navigator.share({
            title: options.title,
            text: options.text,
            url: options.url,
          })
          return true
        } catch (error) {
          console.error("[v0] Web share failed:", error)
          return false
        }
      }
      return false
    }

    try {
      await this.Share.share({
        title: options.title,
        text: options.text,
        url: options.url,
        dialogTitle: options.dialogTitle || "Share",
      })
      return true
    } catch (error) {
      console.error("[v0] Native share failed:", error)
      return false
    }
  }

  async shareExpenseReport(expenses: any[], period: string): Promise<boolean> {
    const total = expenses.reduce((sum, exp) => sum + exp.amount, 0)
    const text = `My ${period} spending report:\nTotal: $${total.toFixed(2)}\nExpenses: ${expenses.length}\n\nGenerated by SpendWise`

    return this.share({
      title: `${period} Spending Report`,
      text,
    })
  }

  async shareSavingsGoal(goalName: string, progress: number, target: number): Promise<boolean> {
    const text = `I'm ${progress.toFixed(0)}% towards my "${goalName}" goal!\nSaved: $${progress.toFixed(2)} / $${target.toFixed(2)}\n\nTracking with SpendWise`

    return this.share({
      title: "Savings Goal Progress",
      text,
    })
  }
}

export const shareManager = new ShareManager()
